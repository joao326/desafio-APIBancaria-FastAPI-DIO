from contextlib import asynccontextmanager

from fastapi import FastAPI, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from src.controllers import account, auth, transaction
from src.database import database
from src.exceptions import AccountNotFoundError, BusinessError

# define um gerenciador de contexto ass√≠ncrono para gerenciar o ciclo de vida do banco de dados
@asynccontextmanager
async def lifespan(app: FastAPI):
    await database.connect()  # conecta ao banco de dados no in√≠cio do ciclo de vida
    yield  # permite que o FastAPI continue o fluxo de execu√ß√£o
    await database.disconnect()  # desconecta do banco de dados no final do ciclo de vida

# define metadados para categorizar endpoints na documenta√ß√£o OpenAPI
tags_metadata = [
    {
        "name": "auth",
        "description": "Operations for authentication.",  # descri√ß√£o das opera√ß√µes relacionadas √† autentica√ß√£o
    },
    {
        "name": "account",
        "description": "Operations to maintain accounts.",  # descri√ß√£o das opera√ß√µes de gerenciamento de contas
    },
    {
        "name": "transaction",
        "description": "Operations to maintain transactions.",  # descri√ß√£o das opera√ß√µes de transa√ß√µes
    },
]

# cria a aplica√ß√£o FastAPI com configura√ß√µes e metadados
app = FastAPI(
    title="Transactions API",  # t√≠tulo da aplica√ß√£o
    version="1.0.0",  # vers√£o da aplica√ß√£o
    summary="Microservice to maintain withdrawal and deposit operations from current accounts.",  # resumo do servi√ßo
    description="""
Transactions API is the microservice for recording current account transactions. üí∏üí∞

## Account

* **Create accounts**.
* **List accounts**.
* **List account transactions by ID**.

## Transaction

* **Create transactions**.
""",  # descri√ß√£o detalhada exibida na documenta√ß√£o OpenAPI
    openapi_tags=tags_metadata,  # tags para categoriza√ß√£o de endpoints
    redoc_url=None,  # desabilita a interface Redoc
    lifespan=lifespan,  # gerenciador de ciclo de vida da aplica√ß√£o
)

# adiciona middleware CORS para permitir comunica√ß√£o com outros dom√≠nios
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # permite requisi√ß√µes de qualquer origem
    allow_credentials=True,  # permite envio de cookies
    allow_methods=["*"],  # permite todos os m√©todos HTTP
    allow_headers=["*"],  # permite todos os cabe√ßalhos HTTP
)

# inclui os roteadores para autentica√ß√£o, contas e transa√ß√µes
app.include_router(auth.router, tags=["auth"])  # rota para opera√ß√µes de autentica√ß√£o
app.include_router(account.router, tags=["account"])  # rota para opera√ß√µes de conta
app.include_router(transaction.router, tags=["transaction"])  # rota para opera√ß√µes de transa√ß√£o

# define manipulador de exce√ß√£o para erros de conta n√£o encontrada
@app.exception_handler(AccountNotFoundError)
async def account_not_found_error_handler(request: Request, exc: AccountNotFoundError):
    return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content={"detail": "Account not found."})

# define manipulador de exce√ß√£o para erros de neg√≥cio
@app.exception_handler(BusinessError)
async def business_error_handler(request: Request, exc: BusinessError):
    return JSONResponse(status_code=status.HTTP_409_CONFLICT, content={"detail": str(exc)})
